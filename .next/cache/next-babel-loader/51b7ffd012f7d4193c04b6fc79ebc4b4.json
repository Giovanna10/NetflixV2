{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/giovannaradica/Desktop/Projects/NetflixV2/hocs/withLocale.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Error from 'next/error';\nimport { getDisplayName } from 'next/dist/next-server/lib/utils';\nimport { isLocale } from '../translations/types';\nimport { LocaleProvider } from '../context/LocaleContext';\nexport default (function (WrappedPage) {\n  var WithLocale = function WithLocale(_ref) {\n    var locale = _ref.locale,\n        pageProps = _objectWithoutProperties(_ref, [\"locale\"]);\n\n    if (!locale) {\n      return __jsx(Error, {\n        statusCode: 404,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      });\n    }\n\n    return __jsx(LocaleProvider, {\n      lang: locale,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, __jsx(WrappedPage, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    })));\n  };\n\n  WithLocale.getInitialProps = function _callee(ctx) {\n    var pageProps;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            pageProps = {};\n\n            if (!WrappedPage.getInitialProps) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(WrappedPage.getInitialProps(ctx));\n\n          case 4:\n            pageProps = _context.sent;\n\n          case 5:\n            if (!(typeof ctx.query.lang !== 'string' || !isLocale(ctx.query.lang))) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n              locale: undefined\n            }));\n\n          case 7:\n            return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n              locale: ctx.query.lang\n            }));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  WithLocale.displayName = \"withLang(\".concat(getDisplayName(WrappedPage), \")\");\n  return WithLocale;\n});","map":{"version":3,"sources":["/Users/giovannaradica/Desktop/Projects/NetflixV2/hocs/withLocale.tsx"],"names":["React","Error","getDisplayName","isLocale","LocaleProvider","WrappedPage","WithLocale","locale","pageProps","getInitialProps","ctx","query","lang","undefined","displayName"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAASC,cAAT,QAA+B,iCAA/B;AACA,SAASC,QAAT,QAAiC,uBAAjC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAMA,gBAAe,UAACC,WAAD,EAAgC;AAC7C,MAAMC,UAAoC,GAAG,SAAvCA,UAAuC,OAA8B;AAAA,QAA3BC,MAA2B,QAA3BA,MAA2B;AAAA,QAAhBC,SAAgB;;AACzE,QAAI,CAACD,MAAL,EAAa;AACX,aAAO,MAAC,KAAD;AAAO,QAAA,UAAU,EAAE,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AACD,WACE,MAAC,cAAD;AAAgB,MAAA,IAAI,EAAEA,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,WAAD,eAAiBC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF;AAKD,GATD;;AAWAF,EAAAA,UAAU,CAACG,eAAX,GAA6B,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBF,YAAAA,SADuB,GACX,EADW;;AAAA,iBAEvBH,WAAW,CAACI,eAFW;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAGPJ,WAAW,CAACI,eAAZ,CAA4BC,GAA5B,CAHO;;AAAA;AAGzBF,YAAAA,SAHyB;;AAAA;AAAA,kBAKvB,OAAOE,GAAG,CAACC,KAAJ,CAAUC,IAAjB,KAA0B,QAA1B,IAAsC,CAACT,QAAQ,CAACO,GAAG,CAACC,KAAJ,CAAUC,IAAX,CALxB;AAAA;AAAA;AAAA;;AAAA,+DAMbJ,SANa;AAMFD,cAAAA,MAAM,EAAEM;AANN;;AAAA;AAAA,+DAQfL,SARe;AAQJD,cAAAA,MAAM,EAAEG,GAAG,CAACC,KAAJ,CAAUC;AARd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B;;AAWAN,EAAAA,UAAU,CAACQ,WAAX,sBAAqCZ,cAAc,CAACG,WAAD,CAAnD;AAEA,SAAOC,UAAP;AACD,CA1BD","sourcesContent":["import React from 'react'\nimport { NextPage } from 'next'\nimport Error from 'next/error'\nimport { getDisplayName } from 'next/dist/next-server/lib/utils'\nimport { isLocale, Locale } from '../translations/types'\nimport { LocaleProvider } from '../context/LocaleContext'\n\ninterface LangProps {\n  locale?: Locale\n}\n\nexport default (WrappedPage: NextPage<any>) => {\n  const WithLocale: NextPage<any, LangProps> = ({ locale, ...pageProps }) => {\n    if (!locale) {\n      return <Error statusCode={404} />\n    }\n    return (\n      <LocaleProvider lang={locale}>\n        <WrappedPage {...pageProps} />\n      </LocaleProvider>\n    )\n  }\n\n  WithLocale.getInitialProps = async ctx => {\n    let pageProps = {}\n    if (WrappedPage.getInitialProps) {\n      pageProps = await WrappedPage.getInitialProps(ctx)\n    }\n    if (typeof ctx.query.lang !== 'string' || !isLocale(ctx.query.lang)) {\n      return { ...pageProps, locale: undefined }\n    }\n    return { ...pageProps, locale: ctx.query.lang }\n  }\n\n  WithLocale.displayName = `withLang(${getDisplayName(WrappedPage)})`\n\n  return WithLocale\n}\n"]},"metadata":{},"sourceType":"module"}