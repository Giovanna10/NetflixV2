{"ast":null,"code":"var _jsxFileName = \"/Users/giovannaradica/Desktop/Projects/NetflixV2/context/LocaleContext.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport { isLocale } from '../translations/types';\nexport const LocaleContext = React.createContext({\n  locale: 'it',\n  setLocale: () => null\n});\nexport const LocaleProvider = ({\n  lang,\n  children\n}) => {\n  const [locale, setLocale] = React.useState(lang);\n  const {\n    query\n  } = useRouter();\n  React.useEffect(() => {\n    if (locale !== localStorage.getItem('locale')) {\n      localStorage.setItem('locale', locale);\n    }\n  }, [locale]);\n  React.useEffect(() => {\n    if (typeof query.lang === 'string' && isLocale(query.lang) && locale !== query.lang) {\n      setLocale(query.lang);\n    }\n  }, [query.lang, locale]);\n  return __jsx(LocaleContext.Provider, {\n    value: {\n      locale,\n      setLocale\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, children);\n};","map":{"version":3,"sources":["/Users/giovannaradica/Desktop/Projects/NetflixV2/context/LocaleContext.tsx"],"names":["React","useRouter","isLocale","LocaleContext","createContext","locale","setLocale","LocaleProvider","lang","children","useState","query","useEffect","localStorage","getItem","setItem"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAAiBC,QAAjB,QAAiC,uBAAjC;AAOA,OAAO,MAAMC,aAAa,GAAGH,KAAK,CAACI,aAAN,CAAkC;AAC7DC,EAAAA,MAAM,EAAE,IADqD;AAE7DC,EAAAA,SAAS,EAAE,MAAM;AAF4C,CAAlC,CAAtB;AAKP,OAAO,MAAMC,cAA0C,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAwB;AAChF,QAAM,CAACJ,MAAD,EAASC,SAAT,IAAsBN,KAAK,CAACU,QAAN,CAAeF,IAAf,CAA5B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAYV,SAAS,EAA3B;AAEAD,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,QAAIP,MAAM,KAAKQ,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAf,EAA+C;AAC7CD,MAAAA,YAAY,CAACE,OAAb,CAAqB,QAArB,EAA+BV,MAA/B;AACD;AACF,GAJD,EAIG,CAACA,MAAD,CAJH;AAMAL,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,QAAI,OAAOD,KAAK,CAACH,IAAb,KAAsB,QAAtB,IAAkCN,QAAQ,CAACS,KAAK,CAACH,IAAP,CAA1C,IAA0DH,MAAM,KAAKM,KAAK,CAACH,IAA/E,EAAqF;AACnFF,MAAAA,SAAS,CAACK,KAAK,CAACH,IAAP,CAAT;AACD;AACF,GAJD,EAIG,CAACG,KAAK,CAACH,IAAP,EAAaH,MAAb,CAJH;AAMA,SAAO,MAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEA,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuDG,QAAvD,CAAP;AACD,CAjBM","sourcesContent":["import React from 'react'\nimport { useRouter } from 'next/router'\nimport { Locale, isLocale } from '../translations/types'\n\ninterface ContextProps {\n  readonly locale: Locale\n  readonly setLocale: (locale: Locale) => void\n}\n\nexport const LocaleContext = React.createContext<ContextProps>({\n  locale: 'it',\n  setLocale: () => null\n})\n\nexport const LocaleProvider: React.FC<{ lang: Locale }> = ({ lang, children }) => {\n  const [locale, setLocale] = React.useState(lang)\n  const { query } = useRouter()\n\n  React.useEffect(() => {\n    if (locale !== localStorage.getItem('locale')) {\n      localStorage.setItem('locale', locale)\n    }\n  }, [locale])\n\n  React.useEffect(() => {\n    if (typeof query.lang === 'string' && isLocale(query.lang) && locale !== query.lang) {\n      setLocale(query.lang)\n    }\n  }, [query.lang, locale])\n\n  return <LocaleContext.Provider value={{ locale, setLocale }}>{children}</LocaleContext.Provider>\n}\n"]},"metadata":{},"sourceType":"module"}